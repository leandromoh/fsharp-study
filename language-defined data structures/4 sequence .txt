// Many programming tasks require the iteration, aggregation, and transformation of data streamed from
// various sources. One important and general way to code these tasks is in terms of values of the type
// System.Collections.Generic.IEnumerable<type>, which is typically abbreviated to seq<type> in F# code.
// A seq<type> is a value that can be iterated, producing results of type type on demand. Sequences are used
// to wrap collections, computations, and data streams and are frequently used to represent the results of
// database queries

> seq {0 .. 2};;
val it : seq<int> = seq [0; 1; 2;]

> seq {1 .. -2 .. -5};;
val it : seq<int> = seq [1; -1; -3; -5]

> for i in {0..2..10} do printfn "i = %d" i;;

Any value of type seq<type> can be iterated and transformed using functions in the FSharp.Collections.Seq module. 

{0..2..10} |> Seq.map (fun i -> i*i) |> Seq.iter (printfn "%d")

Using Sequence Expressions

> let squares = seq { for i in 0 .. 10 -> (i, i * i) };;
val squares : seq<int * int>

> seq { for (i, iSquared) in squares -> (i, iSquared, i * iSquared) };;
val it : seq<int * int * int> =
 seq [(0, 0, 0); (1, 1, 1); (2, 4, 8); (3, 9, 27); ...]

let checkerboardCoordinates n =
  seq { for row in 1 .. n do
          for col in 1 .. n do
            let sum = row + col
            if sum % 2 = 0 then
              yield (row, col)}

use yield! (yield bang) to flatten inner lists

seq { yield 1; yield! [2;3]; yield 4 } |> Seq.iter (printfn "%d")

let rec allFiles dir : seq<string> = 
  seq { for file in Directory.GetFiles dir do
          yield file
        for subdir in Directory.GetDirectories dir do
          yield! allFiles subdir}

You can also use range and sequence expressions to build list and array values. The syntax is identical, except the surrounding braces are replaced by the usual [ ] for lists and [| |] for arrays
